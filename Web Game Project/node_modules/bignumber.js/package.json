{
  "_args": [
    [
      {
        "raw": "bignumber.js@7.2.1",
        "scope": null,
        "escapedName": "bignumber.js",
        "name": "bignumber.js",
        "rawSpec": "7.2.1",
        "spec": "7.2.1",
        "type": "version"
      },
      "/Users/lachlanmackay/Desktop/WebProgrammingCW/Web Game Project/node_modules/mysql"
    ]
  ],
  "_from": "bignumber.js@7.2.1",
  "_hasShrinkwrap": false,
  "_id": "bignumber.js@7.2.1",
  "_location": "/bignumber.js",
  "_nodeVersion": "10.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/bignumber.js_7.2.1_1527177317585_0.29303924293970507"
  },
  "_npmUser": {
    "name": "mikemcl",
    "email": "M8ch88l@gmail.com"
  },
  "_npmVersion": "5.0.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bignumber.js@7.2.1",
    "scope": null,
    "escapedName": "bignumber.js",
    "name": "bignumber.js",
    "rawSpec": "7.2.1",
    "spec": "7.2.1",
    "type": "version"
  },
  "_requiredBy": [
    "/mysql"
  ],
  "_resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-7.2.1.tgz",
  "_shasum": "80c048759d826800807c4bfd521e50edbba57a5f",
  "_shrinkwrap": null,
  "_spec": "bignumber.js@7.2.1",
  "_where": "/Users/lachlanmackay/Desktop/WebProgrammingCW/Web Game Project/node_modules/mysql",
  "author": {
    "name": "Michael Mclaughlin",
    "email": "M8ch88l@gmail.com"
  },
  "browser": "bignumber.js",
  "bugs": {
    "url": "https://github.com/MikeMcl/bignumber.js/issues"
  },
  "dependencies": {},
  "description": "A library for arbitrary-precision decimal and non-decimal arithmetic",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-S4XzBk5sMB+Rcb/LNcpzXr57VRTxgAvaAEDAl1AwRx27j00hT84O6OkteE7u8UB3NuaaygCRrEpqox4uDOrbdQ==",
    "shasum": "80c048759d826800807c4bfd521e50edbba57a5f",
    "tarball": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-7.2.1.tgz",
    "fileCount": 11,
    "unpackedSize": 384618,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbBuBmCRA9TVsSAnZWagAA9DQP/AsurlYSjjPMJZ5cHlMt\nuUWYGIGzc/0SfWsBh5QHtb4WxZVoA4iwJX+SeK1lqB+DLW0RddWSsMAxGiXI\nW/g2hP2IPTQUtXPj7ZWU+bFA7SFosObVEfuy/LFC0UqqA3V6WfF7xYIpyxhk\nCP9wvG1NPY/KFS8VPN/8LA377teuckVjJ7fsJ+p8eTAauPNjbov2I8axiNe7\nFngWQlCkrdWvBl142ZkSKUcmO0hKsyfkaVPrkcsmrf6CDRCjcsDD+Lu3vEsA\nKlfMk8xcf7tZDoKh8ZRtNnfiVaS4Xp7EUklZqvwOqenvW3Dqi2c+sp1eLWR2\nKPPqQbNQGDDyoDC9R/4c49j31/PUYnq+Wghkd8x1lJHBMlsleCJyMw/grB6h\nhpZ1kDUMwRrwVUxB49QAkk0bqL3sOVfbW23lsQycFuRoHuoGXYLOUJ4SiOR7\nvLNxFG+V+9c6yS+RX3PsYPKoOGEHCjeXFQhLxkqNUExuBfjGxm8SPQQYXvQD\nBNK7ETNrNnpnwBsbQ2UmXhPIRUxPAK2afRX8Ws+R4nydV0gl6K1cdY8gYNGT\nqTlQll6bY+bDhFWpXQ93hdWfLu7nA9gF6Shcgb4Z+lT1c7geCR6SiCZL+QJp\nsv1bLkuULj/lSG/PG6XE8UNMgo4fPKLZzObsLUlN3T9Z8DoCmGW/N982J3hN\nLqsD\r\n=9Aj4\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "38ba62a15c0088ca401f1e3bbd5bdb7acf220fe9",
  "homepage": "https://github.com/MikeMcl/bignumber.js#readme",
  "keywords": [
    "arbitrary",
    "precision",
    "arithmetic",
    "big",
    "number",
    "decimal",
    "float",
    "biginteger",
    "bigdecimal",
    "bignumber",
    "bigint",
    "bignum"
  ],
  "license": "MIT",
  "main": "bignumber",
  "maintainers": [
    {
      "name": "mikemcl",
      "email": "M8ch88l@gmail.com"
    }
  ],
  "module": "bignumber.mjs",
  "name": "bignumber.js",
  "optionalDependencies": {},
  "readme": "![bignumber.js](https://raw.githubusercontent.com/MikeMcl/bignumber.js/gh-pages/bignumberjs.png)\r\n\r\nA JavaScript library for arbitrary-precision decimal and non-decimal arithmetic.\r\n\r\n[![Build Status](https://travis-ci.org/MikeMcl/bignumber.js.svg)](https://travis-ci.org/MikeMcl/bignumber.js)\r\n\r\n<br />\r\n\r\n## Features\r\n\r\n  - Integers and decimals\r\n  - Simple API but full-featured\r\n  - Faster, smaller, and perhaps easier to use than JavaScript versions of Java's BigDecimal\r\n  - 8 KB minified and gzipped\r\n  - Replicates the `toExponential`, `toFixed`, `toPrecision` and `toString` methods of JavaScript's Number type\r\n  - Includes a `toFraction` and a correctly-rounded `squareRoot` method\r\n  - Supports cryptographically-secure pseudo-random number generation\r\n  - No dependencies\r\n  - Wide platform compatibility: uses JavaScript 1.5 (ECMAScript 3) features only\r\n  - Comprehensive [documentation](http://mikemcl.github.io/bignumber.js/) and test set\r\n\r\n![API](https://raw.githubusercontent.com/MikeMcl/bignumber.js/gh-pages/API.png)\r\n\r\nIf a smaller and simpler library is required see [big.js](https://github.com/MikeMcl/big.js/).\r\nIt's less than half the size but only works with decimal numbers and only has half the methods.\r\nIt also does not allow `NaN` or `Infinity`, or have the configuration options of this library.\r\n\r\nSee also [decimal.js](https://github.com/MikeMcl/decimal.js/), which among other things adds support for non-integer powers, and performs all operations to a specified number of significant digits.\r\n\r\n## Load\r\n\r\nThe library is the single JavaScript file *bignumber.js* (or minified, *bignumber.min.js*).\r\n\r\nBrowser:\r\n\r\n```html\r\n<script src='path/to/bignumber.js'></script>\r\n```\r\n\r\n[Node.js](http://nodejs.org):\r\n\r\n```bash\r\n$ npm install --save bignumber.js\r\n```\r\n\r\n```javascript\r\nvar BigNumber = require('bignumber.js');\r\n```\r\n\r\nES6 module (*bignumber.mjs*):\r\n\r\n```javascript\r\n//import BigNumber from 'bignumber.js';\r\nimport {BigNumber} from 'bignumber.js';\r\n```\r\n\r\nAMD loader libraries such as [requireJS](http://requirejs.org/):\r\n\r\n```javascript\r\nrequire(['bignumber'], function(BigNumber) {\r\n    // Use BigNumber here in local scope. No global BigNumber.\r\n});\r\n```\r\n\r\n## Use\r\n\r\n*In all examples below, `var`, semicolons and `toString` calls are not shown.\r\nIf a commented-out value is in quotes it means `toString` has been called on the preceding expression.*\r\n\r\nThe library exports a single function: `BigNumber`, the constructor of BigNumber instances.\r\n\r\nIt accepts a value of type Number, String or BigNumber,\r\n\r\n```javascript\r\nx = new BigNumber(123.4567)\r\ny = BigNumber('123456.7e-3')\r\nz = new BigNumber(x)\r\nx.isEqualTo(y) && y.isEqualTo(z) && x.isEqualTo(z)      // true\r\n```\r\n\r\nand a base can be specified.\r\n\r\n```javascript\r\na = new BigNumber(1011, 2)          // \"11\"\r\nb = new BigNumber('zz.9', 36)       // \"1295.25\"\r\nc = x.plus(y)                       // \"1306.25\"\r\n```\r\n\r\nNote that a BigNumber is created from a Number's decimal `toString()` value not from its underlying binary value. If the latter is required, then pass the Number's `toString(2)` value and specify base 2.\r\n\r\n```javascript\r\nnew BigNumber(Number.MAX_VALUE.toString(2), 2)\r\n``` \r\n\r\nIf the limited precision of Number values is not well understood, **it is recommended to pass String values rather than Number values** to avoid a potential loss of precision.\r\n\r\n```javascript\r\n// Precision loss from using numeric literals with more than 15 significant digits.   \r\nnew BigNumber(1.0000000000000001);                 // '1'\r\nnew BigNumber(88259496234518.57);                  // '88259496234518.56'\r\nnew BigNumber(99999999999999999999);               // '100000000000000000000'\r\n\r\n// Precision loss from using numeric literals outside the range of Number values.\r\nnew BigNumber(2e+308);                             // 'Infinity'\r\nnew BigNumber(1e-324);                             // '0'\r\n\r\n// Precision loss from the unexpected result of arithmetic with Number values.\r\nnew BigNumber(0.7 + 0.1);                          // '0.7999999999999999' \r\n```\r\n\r\nA BigNumber is immutable in the sense that it is not changed by its methods.\r\n\r\n```javascript\r\n0.3 - 0.1                           // 0.19999999999999998\r\nx = new BigNumber(0.3)\r\nx.minus(0.1)                        // \"0.2\"\r\nx                                   // \"0.3\"\r\n```\r\n\r\nThe methods that return a BigNumber can be chained.\r\n\r\n```javascript\r\nx.dividedBy(y).plus(z).times(9)\r\nx.times('1.23456780123456789e+9').plus(9876.5432321).dividedBy('4444562598.111772').integerValue()\r\n```\r\n\r\nSome of the longer method names have a shorter alias.\r\n\r\n```javascript\r\nx.squareRoot().dividedBy(y).exponentiatedBy(3).isEqualTo( x.sqrt().div(y).pow(3) )    // true\r\nx.modulo(y).multipliedBy(z).eq( x.mod(y).times(z) )                                   // true\r\n```\r\n\r\nAs with JavaScript's Number type, there are `toExponential`, `toFixed` and `toPrecision` methods\r\n\r\n```javascript\r\nx = new BigNumber(255.5)\r\nx.toExponential(5)                  // \"2.55500e+2\"\r\nx.toFixed(5)                        // \"255.50000\"\r\nx.toPrecision(5)                    // \"255.50\"\r\nx.toNumber()                        //  255.5\r\n```\r\n\r\n and a base can be specified for `toString`.\r\n\r\n ```javascript\r\n x.toString(16)                     // \"ff.8\"\r\n ```\r\n\r\nThere is also a `toFormat` method which may be useful for internationalisation\r\n\r\n```javascript\r\ny = new BigNumber('1234567.898765')\r\ny.toFormat(2)                       // \"1,234,567.90\"\r\n```\r\n\r\nThe maximum number of decimal places of the result of an operation involving division (i.e. a division, square root, base conversion or negative power operation) is set using the `config` method of the `BigNumber` constructor.\r\n\r\nThe other arithmetic operations always give the exact result.\r\n\r\n```javascript\r\nBigNumber.config({ DECIMAL_PLACES: 10, ROUNDING_MODE: 4 })\r\n\r\nx = new BigNumber(2);\r\ny = new BigNumber(3);\r\nz = x.dividedBy(y)                        // \"0.6666666667\"\r\nz.squareRoot()                            // \"0.8164965809\"\r\nz.exponentiatedBy(-3)                     // \"3.3749999995\"\r\nz.toString(2)                             // \"0.1010101011\"\r\nz.multipliedBy(z)                         // \"0.44444444448888888889\"\r\nz.multipliedBy(z).decimalPlaces(10)       // \"0.4444444445\"\r\n```\r\n\r\nThere is a `toFraction` method with an optional *maximum denominator* argument\r\n\r\n```javascript\r\ny = new BigNumber(355)\r\npi = y.dividedBy(113)               // \"3.1415929204\"\r\npi.toFraction()                     // [ \"7853982301\", \"2500000000\" ]\r\npi.toFraction(1000)                 // [ \"355\", \"113\" ]\r\n```\r\n\r\nand `isNaN` and `isFinite` methods, as `NaN` and `Infinity` are valid `BigNumber` values.\r\n\r\n```javascript\r\nx = new BigNumber(NaN)                                           // \"NaN\"\r\ny = new BigNumber(Infinity)                                      // \"Infinity\"\r\nx.isNaN() && !y.isNaN() && !x.isFinite() && !y.isFinite()        // true\r\n```\r\n\r\nThe value of a BigNumber is stored in a decimal floating point format in terms of a coefficient, exponent and sign.\r\n\r\n```javascript\r\nx = new BigNumber(-123.456);\r\nx.c                                 // [ 123, 45600000000000 ]  coefficient (i.e. significand)\r\nx.e                                 // 2                        exponent\r\nx.s                                 // -1                       sign\r\n```\r\n\r\nFor advanced usage, multiple BigNumber constructors can be created, each with their own independent configuration which applies to all BigNumber's created from it.\r\n\r\n```javascript\r\n// Set DECIMAL_PLACES for the original BigNumber constructor\r\nBigNumber.config({ DECIMAL_PLACES: 10 })\r\n\r\n// Create another BigNumber constructor, optionally passing in a configuration object\r\nBN = BigNumber.clone({ DECIMAL_PLACES: 5 })\r\n\r\nx = new BigNumber(1)\r\ny = new BN(1)\r\n\r\nx.div(3)                            // '0.3333333333'\r\ny.div(3)                            // '0.33333'\r\n```\r\n\r\nFor futher information see the [API](http://mikemcl.github.io/bignumber.js/) reference in the *doc* directory.\r\n\r\n## Test\r\n\r\nThe *test/modules* directory contains the test scripts for each method.\r\n\r\nThe tests can be run with Node.js or a browser. For Node.js use\r\n\r\n    $ npm test\r\n\r\nor\r\n\r\n    $ node test/test\r\n\r\nTo test a single method, use, for example\r\n\r\n    $ node test/methods/toFraction\r\n\r\nFor the browser, open *test/test.html*.\r\n\r\n## Performance\r\n\r\nSee the [README](https://github.com/MikeMcl/bignumber.js/tree/master/perf) in the *perf* directory.\r\n\r\n## Build\r\n\r\nFor Node, if [uglify-js](https://github.com/mishoo/UglifyJS2) is installed\r\n\r\n    npm install uglify-js -g\r\n\r\nthen\r\n\r\n    npm run build\r\n\r\nwill create *bignumber.min.js*.\r\n\r\nA source map will also be created in the root directory.\r\n\r\n## Feedback\r\n\r\nOpen an issue, or email\r\n\r\nMichael\r\n\r\n<a href=\"mailto:M8ch88l@gmail.com\">M8ch88l@gmail.com</a>\r\n\r\n## Licence\r\n\r\nThe MIT Licence.\r\n\r\nSee [LICENCE](https://github.com/MikeMcl/bignumber.js/blob/master/LICENCE).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/MikeMcl/bignumber.js.git"
  },
  "scripts": {
    "build": "uglifyjs bignumber.js --source-map bignumber.js.map -c -m -o bignumber.min.js --preamble \"/* bignumber.js v7.2.1 https://github.com/MikeMcl/bignumber.js/LICENCE */\"",
    "test": "node test/test"
  },
  "types": "bignumber.d.ts",
  "version": "7.2.1"
}
