{
  "_args": [
    [
      {
        "raw": "bcrypt",
        "scope": null,
        "escapedName": "bcrypt",
        "name": "bcrypt",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/lachlanmackay/Desktop/WebProgrammingCW/Web Game Project"
    ]
  ],
  "_from": "bcrypt",
  "_hasShrinkwrap": false,
  "_id": "bcrypt@3.0.7",
  "_location": "/bcrypt",
  "_nodeVersion": "12.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/bcrypt_3.0.7_1574072799142_0.6799788794787169"
  },
  "_npmUser": {
    "name": "amitosh",
    "email": "amitosh.swain@gmail.com"
  },
  "_npmVersion": "6.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bcrypt",
    "scope": null,
    "escapedName": "bcrypt",
    "name": "bcrypt",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-3.0.7.tgz",
  "_shasum": "1187d29df2e1cde44268152b13e3d4a655a7c7de",
  "_shrinkwrap": null,
  "_spec": "bcrypt",
  "_where": "/Users/lachlanmackay/Desktop/WebProgrammingCW/Web Game Project",
  "author": {
    "name": "Nick Campbell",
    "url": "https://github.com/ncb000gt"
  },
  "binary": {
    "module_name": "bcrypt_lib",
    "module_path": "./lib/binding/",
    "package_name": "{module_name}-v{version}-{node_abi}-{platform}-{arch}-{libc}.tar.gz",
    "host": "https://github.com/kelektiv/node.bcrypt.js/releases/download/",
    "remote_path": "v{version}"
  },
  "bugs": {
    "url": "https://github.com/kelektiv/node.bcrypt.js/issues"
  },
  "contributors": [
    {
      "name": "Antonio Salazar Cardozo",
      "email": "savedfastcool@gmail.com",
      "url": "https://github.com/Shadowfiend"
    },
    {
      "name": "Van Nguyen",
      "email": "the.gol.effect@gmail.com",
      "url": "https://github.com/thegoleffect"
    },
    {
      "name": "David Trejo",
      "email": "david@dtrejo.com",
      "url": "https://github.com/dtrejo"
    },
    {
      "name": "Ben Glow",
      "email": "glen.low@pixelglow.com",
      "url": "https://github.com/pixelglow"
    },
    {
      "name": "NewITFarmer.com",
      "url": "https://github.com/newitfarmer"
    },
    {
      "name": "Alfred Westerveld",
      "email": "alfredwesterveld@gmail.com",
      "url": "https://github.com/alfredwesterveld"
    },
    {
      "name": "Vincent Côté-Roy",
      "email": "vincentcr@gmail.com",
      "url": "https://github.com/vincentcr"
    },
    {
      "name": "Lloyd Hilaiel",
      "email": "lloyd@hilaiel.com",
      "url": "https://github.com/lloyd"
    },
    {
      "name": "Roman Shtylman",
      "email": "shtylman@gmail.com",
      "url": "https://github.com/shtylman"
    },
    {
      "name": "Vadim Graboys",
      "email": "dimva13@gmail.com",
      "url": "https://github.com/vadimg"
    },
    {
      "name": "Ben Noorduis",
      "url": "https://github.com/bnoordhuis"
    },
    {
      "name": "Nate Rajlich",
      "email": "nathan@tootallnate.net",
      "url": "https://github.com/tootallnate"
    },
    {
      "name": "Sean McArthur",
      "email": "sean.monstar@gmail.com",
      "url": "https://github.com/seanmonstar"
    },
    {
      "name": "Fanie Oosthuysen",
      "email": "fanie.oosthuysen@gmail.com",
      "url": "https://github.com/weareu"
    },
    {
      "name": "Amitosh Swain Mahapatra",
      "email": "amitosh.swain@gmail.com",
      "url": "https://github.com/Agathver"
    },
    {
      "name": "Corbin Crutchley",
      "email": "crutchcorn@gmail.com",
      "url": "https://github.com/crutchcorn"
    }
  ],
  "dependencies": {
    "nan": "2.14.0",
    "node-pre-gyp": "0.13.0"
  },
  "description": "A bcrypt library for NodeJS.",
  "devDependencies": {
    "nodeunit": "^0.11.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-K5UglF9VQvBMHl/1elNyyFvAfOY9Bj+rpKrCSR9sFwcW8FywAYJSRwTURNej5TaAK2TEJkcJ6r6lh1YPmspx5Q==",
    "shasum": "1187d29df2e1cde44268152b13e3d4a655a7c7de",
    "tarball": "https://registry.npmjs.org/bcrypt/-/bcrypt-3.0.7.tgz",
    "fileCount": 24,
    "unpackedSize": 142514,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd0nHfCRA9TVsSAnZWagAAPFYP/1mCPVolZHoAZ25D2MCR\nHTfloV9SYmIgUKqyTvXMcxYmLUImL48Cw+TrwQFC2mKQKgRHUD3WMluYPyMP\nSf0vLPIXoEtZIE46avYFSKAVkijNCfvrNcT+3V7Vec0m9p0G6AtQnDXzne/m\np0qMiTOOPn4JjVhLaC74/tuia4tRpx/6fGZlyCmaqJWs+VxRRiBMw4YTMIMV\n0yJMwceQuKpESJMtgKVyIK3IPWofNmL/4eU5iI36W3z96wJqpmHDg9lUF4OP\nVxQY3biFOvM76dvpf7TdtiaGGCucmytEBMo2qNQ+8l7SBfw4HxrsRsxzjAZS\n8nXXohTqjwHRTBr+HnCYICJIvYaNDyjHlxkkbhlvLuzK96VpVEd9VN6CI8DW\nPyk1TdO3BbeVvGFT+4Pb70RK7jb6j7VEPNV7c6OIi62sXyAn5oOSitqlUM2I\n3NT18kPK0VKX9mJmTyqmUc2g4ClubBxzOlQuneEeCK9m6i8l+apbHlExZQCK\n10ew9PscucjgOY0/zCHqf1XTNcf1PLgVMxb0RZCGR4Q+zR3NxAh2eT2EfFi8\nMutX9OimAcqWN3XLa5iYIl3GgXO+8pm5cgoc60ql5URux39YQbQ8ipbx/zCO\n2gKsCO61uWs4x3IinMRkVj/5NbXap5OTDdJ4R2qmw1jk12248TGiCXNsyu09\nzjdV\r\n=NIqZ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "gitHead": "4d3a977b361506d22123fa7df16caeb2b2699b3f",
  "homepage": "https://github.com/kelektiv/node.bcrypt.js#readme",
  "keywords": [
    "bcrypt",
    "password",
    "auth",
    "authentication",
    "encryption",
    "crypt",
    "crypto"
  ],
  "license": "MIT",
  "main": "./bcrypt",
  "maintainers": [
    {
      "name": "amitosh",
      "email": "amitosh.swain@gmail.com"
    },
    {
      "name": "defunctzombie",
      "email": "shtylman@gmail.com"
    },
    {
      "name": "jfirebaugh",
      "email": "john.firebaugh@gmail.com"
    },
    {
      "name": "ncb000gt",
      "email": "nicholas.j.campbell@gmail.com"
    },
    {
      "name": "tootallnate",
      "email": "nathan@tootallnate.net"
    }
  ],
  "name": "bcrypt",
  "optionalDependencies": {},
  "readme": "# node.bcrypt.js\n[![Build Status](https://travis-ci.org/kelektiv/node.bcrypt.js.svg?branch=master)](https://travis-ci.org/kelektiv/node.bcrypt.js)\n[![Dependency Status](https://david-dm.org/kelektiv/node.bcrypt.js.svg)](https://david-dm.org/kelektiv/node.bcrypt.js)\n\nA library to help you hash passwords.\n\nYou can read about [bcrypt in Wikipedia][bcryptwiki] as well as in the following article:\n[How To Safely Store A Password][codahale]\n\n## If You Are Submitting Bugs or Issues\n\nVerify that the node version you are using is a _stable_ version; it has an even major release number. Unstable versions are currently not supported and issues created while using an unstable version will be closed.\n\nIf you are on a stable version of node, please provide a sufficient code snippet or log files for installation issues. The code snippet does not require you to include confidential information. However, it must provide enough information such that the problem can be replicable. Issues which are closed without resolution often lack required information for replication.\n\n\n## Version Compatibility\n\n| Node Version   | Bcrypt Version |\n| -------------- | -------------- |\n| 0.4            | <= 0.4         |\n| 0.6, 0.8, 0.10 | >= 0.5         |\n| 0.11           | >= 0.8         |\n| 4              | <= 2.1.0       |\n| 8              | >= 1.0.3       |\n| 10, 11         | >= 3           |\n| 12             | >= 3.0.6       |\n\n`node-gyp` only works with stable/released versions of node. Since the `bcrypt` module uses `node-gyp` to build and install, you'll need a stable version of node to use bcrypt. If you do not, you'll likely see an error that starts with:\n\n```\ngyp ERR! stack Error: \"pre\" versions of node cannot be installed, use the --nodedir flag instead\n```\n\n## Security Issues And Concerns\n\n> Per bcrypt implementation, only the first 72 characters of a string are used. Any extra characters are ignored when matching passwords.\n\nAs should be the case with any security tool, this library should be scrutinized by anyone using it. If you find or suspect an issue with the code, please bring it to my attention and I'll spend some time trying to make sure that this tool is as secure as possible.\n\nTo make it easier for people using this tool to analyze what has been surveyed, here is a list of BCrypt related security issues/concerns as they've come up.\n\n* An [issue with passwords][jtr] was found with a version of the Blowfish algorithm developed for John the Ripper. This is not present in the OpenBSD version and is thus not a problem for this module. HT [zooko][zooko].\n\n## Compatibility Note\n\nThis library supports `$2a$` and `$2b$` prefix bcrypt hashes. `$2x$` and `$2y$` hashes are specific to bcrypt implementation developed for Jon the Ripper. In theory, they should be compatible with `$2b$` prefix.\n\nCompatibility with hashes generated by other languages is not 100% guaranteed due to difference in character encodings. However, it should not be an issue for most cases.\n\n### Migrating from v1.0.x\n\nHashes generated in earlier version of `bcrypt` remain 100% supported in `v2.x.x` and later versions. In most cases, the migration should be a bump in the `package.json`.\n\nHashes generated in `v2.x.x` using the defaults parameters will not work in earlier versions.\n\n## Dependencies\n\n* NodeJS\n* `node-gyp`\n * Please check the dependencies for this tool at: https://github.com/nodejs/node-gyp\n  * Windows users will need the options for c# and c++ installed with their visual studio instance.\n  * Python 2.x\n* `OpenSSL` - This is only required to build the `bcrypt` project if you are using versions <= 0.7.7. Otherwise, we're using the builtin node crypto bindings for seed data (which use the same OpenSSL code paths we were, but don't have the external dependency).\n\n## Install via NPM\n\n```\nnpm install bcrypt\n```\n***Note:*** OS X users using Xcode 4.3.1 or above may need to run the following command in their terminal prior to installing if errors occur regarding xcodebuild: ```sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer```\n\n_Pre-built binaries for various NodeJS versions are made available on a best-effort basis._\n\nOnly the current stable and supported LTS releases are actively tested against. Please note that there may be an interval between the release of the module and the availabilty of the compiled modules.\n\nCurrently, we have pre-built binaries that support the following platforms:\n\n1. Windows x32 and x64\n2. Linux x64 (GlibC targets only). Pre-built binaries for MUSL targets such as Apline Linux are not available.\n3. macOS\n\nIf you face an error like this:\n\n```\nnode-pre-gyp ERR! Tried to download(404): https://github.com/kelektiv/node.bcrypt.js/releases/download/v1.0.2/bcrypt_lib-v1.0.2-node-v48-linux-x64.tar.gz\n```\n\nmake sure you have the appropriate dependencies installed and configured for your platform. You can find installation instructions for the dependencies for some common platforms [in this page][depsinstall].\n\n## Usage\n\n### async (recommended)\n\n```javascript\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\nconst myPlaintextPassword = 's0/\\/\\P4$$w0rD';\nconst someOtherPlaintextPassword = 'not_bacon';\n```\n\n#### To hash a password:\n\nTechnique 1 (generate a salt and hash on separate function calls):\n\n```javascript\nbcrypt.genSalt(saltRounds, function(err, salt) {\n    bcrypt.hash(myPlaintextPassword, salt, function(err, hash) {\n        // Store hash in your password DB.\n    });\n});\n```\n\nTechnique 2 (auto-gen a salt and hash):\n\n```javascript\nbcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash) {\n  // Store hash in your password DB.\n});\n```\n\nNote that both techniques achieve the same end-result.\n\n#### To check a password:\n\n```javascript\n// Load hash from your password DB.\nbcrypt.compare(myPlaintextPassword, hash, function(err, res) {\n    // res == true\n});\nbcrypt.compare(someOtherPlaintextPassword, hash, function(err, res) {\n    // res == false\n});\n```\n\nThe \"compare\" function counters timing attacks (using a so-called 'constant-time' algorithm).\nIn general, don't use the normal JavaScript string comparison functions to compare passwords,\ncryptographic keys, or cryptographic hashes if they are relevant to security.\n\n### with promises\n\nbcrypt uses whatever Promise implementation is available in `global.Promise`. NodeJS >= 0.12 has a native Promise implementation built in. However, this should work in any Promises/A+ compliant implementation.\n\nAsync methods that accept a callback, return a `Promise` when callback is not specified if Promise support is available.\n\n```javascript\nbcrypt.hash(myPlaintextPassword, saltRounds).then(function(hash) {\n    // Store hash in your password DB.\n});\n```\n```javascript\n// Load hash from your password DB.\nbcrypt.compare(myPlaintextPassword, hash).then(function(res) {\n    // res == true\n});\nbcrypt.compare(someOtherPlaintextPassword, hash).then(function(res) {\n    // res == false\n});\n```\n\nThis is also compatible with `async/await`\n\n```javascript\nasync function checkUser(username, password) {\n    //... fetch user from a db etc.\n\n    const match = await bcrypt.compare(password, user.passwordHash);\n\n    if(match) {\n        //login\n    }\n\n    //...\n}\n```\n\n### sync\n\n```javascript\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\nconst myPlaintextPassword = 's0/\\/\\P4$$w0rD';\nconst someOtherPlaintextPassword = 'not_bacon';\n```\n\n#### To hash a password:\n\nTechnique 1 (generate a salt and hash on separate function calls):\n\n```javascript\nvar salt = bcrypt.genSaltSync(saltRounds);\nvar hash = bcrypt.hashSync(myPlaintextPassword, salt);\n// Store hash in your password DB.\n```\n\nTechnique 2 (auto-gen a salt and hash):\n\n```javascript\nvar hash = bcrypt.hashSync(myPlaintextPassword, saltRounds);\n// Store hash in your password DB.\n```\n\nAs with async, both techniques achieve the same end-result.\n\n#### To check a password:\n\n```javascript\n// Load hash from your password DB.\nbcrypt.compareSync(myPlaintextPassword, hash); // true\nbcrypt.compareSync(someOtherPlaintextPassword, hash); // false\n```\nThe \"compareSync\" function counters timing attacks (using a so-called 'constant-time' algorithm).\nIn general, don't use the normal JavaScript string comparison functions to compare passwords,\ncryptographic keys, or cryptographic hashes if they are relevant to security.\n\n### Why is async mode recommended over sync mode?\nIf you are using bcrypt on a simple script, using the sync mode is perfectly fine. However, if you are using bcrypt on a server, the async mode is recommended. This is because the hashing done by bcrypt is CPU intensive, so the sync version will block the event loop and prevent your application from servicing any other inbound requests or events. The async version uses a thread pool which does not block the main event loop.\n\n## API\n\n`BCrypt.`\n\n  * `genSaltSync(rounds, minor)`\n    * `rounds` - [OPTIONAL] - the cost of processing the data. (default - 10)\n    * `minor` - [OPTIONAL] - minor version of bcrypt to use. (default - b)\n  * `genSalt(rounds, minor, cb)`\n    * `rounds` - [OPTIONAL] - the cost of processing the data. (default - 10)\n    * `minor` - [OPTIONAL] - minor version of bcrypt to use. (default - b)\n    * `cb` - [OPTIONAL] - a callback to be fired once the salt has been generated. uses eio making it asynchronous. If `cb` is not specified, a `Promise` is returned if Promise support is available.\n      * `err` - First parameter to the callback detailing any errors.\n      * `salt` - Second parameter to the callback providing the generated salt.\n  * `hashSync(data, salt)`\n    * `data` - [REQUIRED] - the data to be encrypted.\n    * `salt` - [REQUIRED] - the salt to be used to hash the password. if specified as a number then a salt will be generated with the specified number of rounds and used (see example under **Usage**).\n  * `hash(data, salt, cb)`\n    * `data` - [REQUIRED] - the data to be encrypted.\n    * `salt` - [REQUIRED] - the salt to be used to hash the password. if specified as a number then a salt will be generated with the specified number of rounds and used (see example under **Usage**).\n    * `cb` - [OPTIONAL] - a callback to be fired once the data has been encrypted. uses eio making it asynchronous. If `cb` is not specified, a `Promise` is returned if Promise support is available.\n      * `err` - First parameter to the callback detailing any errors.\n      * `encrypted` - Second parameter to the callback providing the encrypted form.\n  * `compareSync(data, encrypted)`\n    * `data` - [REQUIRED] - data to compare.\n    * `encrypted` - [REQUIRED] - data to be compared to.\n  * `compare(data, encrypted, cb)`\n    * `data` - [REQUIRED] - data to compare.\n    * `encrypted` - [REQUIRED] - data to be compared to.\n    * `cb` - [OPTIONAL] - a callback to be fired once the data has been compared. uses eio making it asynchronous. If `cb` is not specified, a `Promise` is returned if Promise support is available.\n      * `err` - First parameter to the callback detailing any errors.\n      * `same` - Second parameter to the callback providing whether the data and encrypted forms match [true | false].\n  * `getRounds(encrypted)` - return the number of rounds used to encrypt a given hash\n    * `encrypted` - [REQUIRED] - hash from which the number of rounds used should be extracted.\n\n## A Note on Rounds\n\nA note about the cost. When you are hashing your data the module will go through a series of rounds to give you a secure hash. The value you submit there is not just the number of rounds that the module will go through to hash your data. The module will use the value you enter and go through `2^rounds` iterations of processing.\n\nFrom @garthk, on a 2GHz core you can roughly expect:\n\n    rounds=8 : ~40 hashes/sec\n    rounds=9 : ~20 hashes/sec\n    rounds=10: ~10 hashes/sec\n    rounds=11: ~5  hashes/sec\n    rounds=12: 2-3 hashes/sec\n    rounds=13: ~1 sec/hash\n    rounds=14: ~1.5 sec/hash\n    rounds=15: ~3 sec/hash\n    rounds=25: ~1 hour/hash\n    rounds=31: 2-3 days/hash\n\n\n## Hash Info\n\nThe characters that comprise the resultant hash are `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$`.\n\nResultant hashes will be 60 characters long.\n\n## Testing\n\nIf you create a pull request, tests better pass :)\n\n```\nnpm install\nnpm test\n```\n\n## Credits\n\nThe code for this comes from a few sources:\n\n* blowfish.cc - OpenBSD\n* bcrypt.cc - OpenBSD\n* bcrypt::gen_salt - [gen_salt inclusion to bcrypt][bcryptgs]\n* bcrypt_node.cc - me\n\n## Contributors\n\n* [Antonio Salazar Cardozo][shadowfiend] - Early MacOS X support (when we used libbsd)\n* [Ben Glow][pixelglow] - Fixes for thread safety with async calls\n* [Van Nguyen][thegoleffect] - Found a timing attack in the comparator\n* [NewITFarmer][newitfarmer] - Initial Cygwin support\n* [David Trejo][dtrejo] - packaging fixes\n* [Alfred Westerveld][alfredwesterveld] - packaging fixes\n* [Vincent Côté-Roy][vincentr] - Testing around concurrency issues\n* [Lloyd Hilaiel][lloyd] - Documentation fixes\n* [Roman Shtylman][shtylman] - Code refactoring, general rot reduction, compile options, better memory management with delete and new, and an upgrade to libuv over eio/ev.\n* [Vadim Graboys][vadimg] - Code changes to support 0.5.5+\n* [Ben Noordhuis][bnoordhuis] - Fixed a thread safety issue in nodejs that was perfectly mappable to this module.\n* [Nate Rajlich][tootallnate] - Bindings and build process.\n* [Sean McArthur][seanmonstar] - Windows Support\n* [Fanie Oosthuysen][weareu] - Windows Support\n* [Amitosh Swain Mahapatra][agathver] - $2b$ hash support, ES6 Promise support\n\n## License\nUnless stated elsewhere, file headers or otherwise, the license as stated in the LICENSE file.\n\n[bcryptwiki]: https://en.wikipedia.org/wiki/Bcrypt\n[bcryptgs]: http://mail-index.netbsd.org/tech-crypto/2002/05/24/msg000204.html\n[codahale]: http://codahale.com/how-to-safely-store-a-password/\n[gh13]: https://github.com/ncb000gt/node.bcrypt.js/issues/13\n[jtr]: http://www.openwall.com/lists/oss-security/2011/06/20/2\n[depsinstall]: https://github.com/kelektiv/node.bcrypt.js/wiki/Installation-Instructions\n\n[shadowfiend]:https://github.com/Shadowfiend\n[thegoleffect]:https://github.com/thegoleffect\n[pixelglow]:https://github.com/pixelglow\n[dtrejo]:https://github.com/dtrejo\n[alfredwesterveld]:https://github.com/alfredwesterveld\n[newitfarmer]:https://github.com/newitfarmer\n[zooko]:https://twitter.com/zooko\n[vincentr]:https://twitter.com/vincentcr\n[lloyd]:https://github.com/lloyd\n[shtylman]:https://github.com/shtylman\n[vadimg]:https://github.com/vadimg\n[bnoordhuis]:https://github.com/bnoordhuis\n[tootallnate]:https://github.com/tootallnate\n[seanmonstar]:https://github.com/seanmonstar\n[weareu]:https://github.com/weareu\n[agathver]:https://github.com/Agathver\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kelektiv/node.bcrypt.js.git"
  },
  "scripts": {
    "install": "node-pre-gyp install --fallback-to-build",
    "test": "npm install --build-from-source && nodeunit test"
  },
  "version": "3.0.7"
}
